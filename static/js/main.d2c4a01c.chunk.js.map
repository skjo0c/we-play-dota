{"version":3,"sources":["containers/dashboard/reducer.js","reducers/index.js","containers/dashboard/constants.js","utils/request.js","containers/dashboard/actions.js","containers/dashboard/saga.js","saga/index.js","store.js","containers/dashboard/selectors.js","containers/dashboard/index.js","App.js","serviceWorker.js","index.js","utils/localStorage.js"],"names":["initialState","items","loadingItems","error","reducers","combineReducers","dashboardReducer","state","action","type","parseJSON","response","status","json","checkStatus","a","window","location","replace","Error","request","url","options","fetch","process","Accept","then","requestAllItems","dashboardSaga","call","method","put","errorMessage","msg","takeLatest","rootSaga","all","fork","persistedState","serializedState","localStorage","getItem","JSON","parse","e","console","log","loadFromLocalStorage","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","run","dashboardState","createMakeSelector","key","createSelector","makeSelectAllItems","makeSelectLoadingItems","Dashboard","fetchAllItems","this","props","allItems","groupedByLeagueName","reduce","r","league_name","push","Object","create","Container","Row","className","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","Button","variant","keys","map","val","Col","sm","md","lg","Card","Title","React","Component","mapStateToProps","createStructuredSelector","connect","dispatch","App","exact","path","component","Boolean","hostname","match","history","createBrowserHistory","loadState","subscribe","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d2c4a01c.chunk.js","sourcesContent":["import {\n  REQUEST_ALL_ITEMS,\n  RECEIVE_ALL_ITEMS,\n  REQUEST_ALL_ITEMS_FAIL\n} from \"./constants\";\n\nexport const initialState = {\n  items: [],\n  loadingItems: false,\n  error: false\n};\n\nexport const dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST_ALL_ITEMS:\n      return {\n        ...state,\n        items: [],\n        loadingItems: true,\n        error: false\n      };\n    case RECEIVE_ALL_ITEMS:\n      return {\n        ...state,\n        loadingItems: false,\n        items: action.items\n      };\n    case REQUEST_ALL_ITEMS_FAIL:\n      return {\n        ...state,\n        loadingItems: true,\n        error: action.error\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { dashboardReducer } from '../containers/dashboard/reducer';\n\nconst reducers = combineReducers({\n  dashboardReducer,\n});\n\nexport default reducers;\n","export const REQUEST_ALL_ITEMS = \"dashboard/REQUEST_ALL_ITEMS\";\nexport const RECEIVE_ALL_ITEMS = \"dashboard/RECEIVE_ALL_ITEMS\";\nexport const REQUEST_ALL_ITEMS_FAIL = \"dashboard/REQUEST_ALL_ITEMS_FAIL\";\n","/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nasync function checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  if (response.status === 401) {\n    window.location.replace(\"/logout\");\n  }\n  const error = new Error();\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(`${process.env.REACT_APP_API_BASE_URL}${url}`, {\n    ...options,\n    Accept: \"application/json\"\n  })\n    .then(checkStatus)\n    .then(parseJSON);\n}\n","import {\n  REQUEST_ALL_ITEMS,\n  RECEIVE_ALL_ITEMS,\n  REQUEST_ALL_ITEMS_FAIL\n} from \"./constants\";\n\nexport const requestAllItems = () => ({\n  type: REQUEST_ALL_ITEMS\n});\n\nexport const receiveAllItems = items => ({\n  type: RECEIVE_ALL_ITEMS,\n  items\n});\n\nexport const requestAllItemsFail = error => ({\n  type: REQUEST_ALL_ITEMS_FAIL,\n  error\n});\n","import { takeLatest, put, call } from 'redux-saga/effects';\nimport request from '../../utils/request';\nimport { REQUEST_ALL_ITEMS } from './constants';\nimport { receiveAllItems, requestAllItemsFail } from './actions';\n\nfunction* requestAllItems() {\n  try {\n    const response = yield call(request, `/api/proMatches`, {\n      method: 'GET',\n    });\n    yield put(receiveAllItems(response));\n  } catch (error) {\n    let errorMessage = yield error.response.json();\n    errorMessage = errorMessage.msg;\n    yield put(requestAllItemsFail(errorMessage));\n  }\n}\n\nfunction* dashboardSaga() {\n  yield takeLatest(REQUEST_ALL_ITEMS, requestAllItems);\n}\n\nexport default dashboardSaga;\n","import { all, fork } from 'redux-saga/effects';\nimport dashboardSaga from '../containers/dashboard/saga';\n\nfunction* rootSaga() {\n  yield all([fork(dashboardSaga)]);\n}\n\nexport default rootSaga;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers';\nimport rootSaga from './saga';\n\nconst loadFromLocalStorage = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\nconst persistedState = loadFromLocalStorage();\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer /* preloadedState, */,\n    persistedState,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      // window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      //   window.__REDUX_DEVTOOLS_EXTENSION__()\n      ...(window.__REDUX_DEVTOOLS_EXTENSION__\n        ? [window.__REDUX_DEVTOOLS_EXTENSION__()]\n        : [])\n    )\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default configureStore;\n","import { createSelector } from \"reselect\";\nimport { initialState } from \"./reducer\";\n\nconst dashboardState = ({ dashboardReducer }) =>\n  dashboardReducer || initialState;\n\nconst createMakeSelector = key => () =>\n  createSelector(\n    dashboardState,\n    state => state[key]\n  );\n\nexport const makeSelectAllItems = createMakeSelector(\"items\");\nexport const makeSelectLoadingItems = createMakeSelector(\"loadingItems\");\nexport const makeSelectAllItemsError = createMakeSelector(\"error\");\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { createStructuredSelector } from 'reselect';\nimport { requestAllItems } from './actions';\nimport { makeSelectAllItems, makeSelectLoadingItems } from './selectors';\nimport './style.css';\n\nimport {\n  Card,\n  Container,\n  Row,\n  Col,\n  InputGroup,\n  FormControl,\n  Button,\n} from 'react-bootstrap';\n\nclass Dashboard extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    const { fetchAllItems } = this.props;\n    console.log(this.props, 'hello world');\n    fetchAllItems();\n  }\n\n  render() {\n    const { allItems, loadingItems } = this.props;\n\n    console.log(allItems, 'all items');\n\n    const groupedByLeagueName = allItems.reduce(function (r, a) {\n      r[a.league_name] = r[a.league_name] || [];\n      r[a.league_name].push(a);\n      return r;\n    }, Object.create(null));\n\n    console.log(groupedByLeagueName);\n\n    return (\n      <>\n        <Container>\n          <Row className=\"justify-content-md-center\">\n            <InputGroup className=\"m-3 input-row\">\n              <FormControl\n                placeholder=\"Search\"\n                aria-label=\"Search\"\n                aria-describedby=\"basic-addon2\"\n              />\n              <InputGroup.Append>\n                <Button variant=\"outline-secondary\">\n                  <i className=\"fa fa-search\"></i>\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Row>\n\n          <Row>\n            {Object.keys(groupedByLeagueName).map((key, val) => (\n              <Col sm={12} md={6} lg={4} key={key} className=\"col-card\">\n                <Card className=\"card\">\n                  <Card.Title>{key}</Card.Title>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  allItems: makeSelectAllItems(),\n  loadingItems: makeSelectLoadingItems(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllItems: () => dispatch(requestAllItems()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Dashboard from './containers/dashboard';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div>\n          <Route exact path=\"/\" component={Dashboard} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport { loadState, saveState } from './utils/localStorage';\nimport { createBrowserHistory } from 'history';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createBrowserHistory();\nconst initialState = loadState() || {};\nconst store = configureStore(initialState, history);\n// const store = configureStore();\n\nstore.subscribe(() => {\n  // if user was logged in, keep the login details\n  // const { loginReducer } = store.getState();\n  // if (loginReducer) saveState({ loginReducer });\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (!serializedState) return undefined;\n\n    return JSON.parse(serializedState);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n"],"sourceRoot":""}